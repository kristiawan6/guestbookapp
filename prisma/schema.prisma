// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SuperAdmin
  AdminEvents
}

enum BroadcastType {
  WhatsApp
  Email
}

enum GuestStatus {
  Invited
  Attended
  Cancelled
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole
  isActive  Boolean  @default(true)
  otp       String?
  otpExpires DateTime?
  events    UserEventAssociation[]
  ClaimTransaction ClaimTransaction[]
}

model Event {
  id                 String                 @id @default(cuid())
  name               String
  description        String?
  isActive           Boolean                @default(true)
  users              UserEventAssociation[]
  guests             Guest[]
  guestCategories    GuestCategory[]
  messages           Message[]
  broadcastTemplates BroadcastTemplate[]
  claimableItems     ClaimableItem[]
}

model UserEventAssociation {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String

  @@id([userId, eventId])
}

model GuestCategory {
  id          String   @id @default(cuid())
  code        String?
  name        String
  description String?
  quota       Int?
  isActive    Boolean  @default(true)
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  guests      Guest[]

  @@unique([code, eventId])
}

model Guest {
  id              String      @id @default(cuid())
  name            String
  email           String?
  phoneNumber     String?
  address         String?
  numberOfGuests  Int?
  session         String?
  tableNumber     String?
  notes           String?
  qrCode          String?     @unique
  invitationLink  String?
  status          GuestStatus @default(Invited)
  event           Event       @relation(fields: [eventId], references: [id])
  eventId         String
  guestCategory   GuestCategory? @relation(fields: [guestCategoryId], references: [id])
  guestCategoryId String?
  messages        Message[]
  claimTransactions ClaimTransaction[]

  @@unique([email, eventId])
  @@unique([phoneNumber, eventId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  timestamp DateTime @default(now())
  approved  Boolean  @default(false)
  guest     Guest    @relation(fields: [guestId], references: [id])
  guestId   String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
}

model BroadcastTemplate {
  id              String        @id @default(cuid())
  name            String
  type            BroadcastType
  content         String
  subject         String? // For Email type
  footerMessage   String? // For WhatsApp type
  button          String? // For WhatsApp type
  imageAttachment String?
  event           Event         @relation(fields: [eventId], references: [id])
  eventId         String
}

model ClaimableItem {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  totalQuantity      Int
  remainingQuantity  Int
  event              Event    @relation(fields: [eventId], references: [id])
  eventId            String
  claimTransactions  ClaimTransaction[]
}

model ClaimTransaction {
  id              String        @id @default(cuid())
  timestamp       DateTime      @default(now())
  guest           Guest         @relation(fields: [guestId], references: [id])
  guestId         String
  claimableItem   ClaimableItem @relation(fields: [claimableItemId], references: [id])
  claimableItemId String
  admin           User          @relation(fields: [adminId], references: [id])
  adminId         String
}
